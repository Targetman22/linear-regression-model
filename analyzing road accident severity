# Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder

# Load and Prepare the Data
data = pd.read_csv("accident_data.csv")  # Load your dataset
# Select relevant features and the target variable
X = data[['Road Conditions', 'Weather Conditions', 'Traffic Volume', 'Speed Limit', 'Vehicle Type']]
y = data['Accident Severity']

# Preprocess the Data
# One-hot encode categorical variables (Road Conditions, Weather Conditions, and Vehicle Type)
encoder = OneHotEncoder(sparse=False, drop='first')
X_encoded = encoder.fit_transform(X[['Road Conditions', 'Weather Conditions', 'Vehicle Type']])
X_encoded = pd.DataFrame(X_encoded, columns=encoder.get_feature_names(['Road Conditions', 'Weather Conditions', 'Vehicle Type']))
# Combine the one-hot encoded features with the numerical features
X = pd.concat[X_encoded, X[['Traffic Volume', 'Speed Limit']], axis=1]

# Split the Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Make Predictions
y_pred = model.predict(X_test)

# Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Interpret the Model (Coefficients)
coefficients = model.coef_
intercept = model.intercept_

print("Coefficients:", coefficients)
print("Intercept:", intercept)
